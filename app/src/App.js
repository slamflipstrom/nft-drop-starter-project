import React, { useEffect, useState } from "react";
import "./App.css";
import twitterLogo from "./assets/twitter-logo.svg";
import CandyMachine from "./CandyMachine";

// Constants
const TWITTER_HANDLE = "_buildspace";
const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;

const App = () => {
  const [walletAddress, setWalletAddress] = useState(null);
  console.log("walletAddress", walletAddress);

  // To change NFT's, redeploy:
  // 1. Delete the .cache folder that was generated by the Metaplex CLI's candy machine commands.
  // 2. Change up your NFT files to be whatever you want!
  // 3. Run Metaplex's upload command via the CLI to upload the NFTs.
  // 4. Run Metaplex's verify command via the CLI to make sure the NFTs were uploaded.
  // 5. Run Metaplex's create_candy_machine command via the CLI to create a new candy machine.
  // 6. Run Metaplex's update_candy_machine command via the CLI to create the drop date.
  // 7. Update your .env file with all your new addresses.

  const checkIfWalletIsConnected = async () => {
    try {
      const { solana } = window;
      if (solana) {
        if (solana.isPhantom) {
          console.log("Phantom wallet found!");
          const response = await solana.connect({ onlyIfTrusted: true });
          console.log(
            `Connected with Pub Key: ${response.publicKey.toString()}`
          );
          setWalletAddress(response.publicKey.toString());
        } else {
          alert("Solana object not found! Get a Phantom wallet üëª");
        }
      }
    } catch (e) {
      console.error(e);
    }
  };

  const connectWallet = async () => {
    const { solana } = window;
    if (solana) {
      const response = await solana.connect();
      console.log(`Connected with Pub Key: ${response.publicKey.toString()}`);
      setWalletAddress(response.publicKey.toString());
    }
  };

  const renderUnconnectedContainer = () => (
    <button
      className="cta-button connect-wallet-button"
      onClick={connectWallet}
    >
      Connect to Wallet
    </button>
  );

  useEffect(() => {
    const onLoad = async () => {
      await checkIfWalletIsConnected();
    };
    window.addEventListener("load", onLoad);
    return () => window.removeEventListener("load", onLoad);
  });

  return (
    <div className="App">
      <div className="container">
        <div className="header-container">
          <p className="header">üç≠ Candy Drop</p>
          <p className="sub-text">NFT drop machine with fair mint</p>
          {!walletAddress && renderUnconnectedContainer()}
        </div>
        {walletAddress && <CandyMachine walletAddress={window.solana} />}
        <div className="footer-container">
          <img alt="Twitter Logo" className="twitter-logo" src={twitterLogo} />
          <a
            className="footer-text"
            href={TWITTER_LINK}
            target="_blank"
            rel="noreferrer"
          >{`built on @${TWITTER_HANDLE}`}</a>
        </div>
      </div>
    </div>
  );
};

export default App;
